
// 1. 标记式垃圾回收机制，截止至08年是主流
// 1.1 标记-清除
// 缺点： 产生不连续的内存片段

// 1.2 标记-整理
// 改善1.1的缺点


// 2. 引用计数
var obj1 = { A: 1 }; // {A:1}被引用1次
var obj2 = obj1; // {A:1}被引用2次
obj1 = 0; // {A:1}被引用1次
obj2 = 0; // {A:1}被引用0次 // GC时被清除

// 漏洞，循环引用
function test() {
    var obj1 = { A: 1 };
    var obj2 = { B: 2 };
    obj1.a = obj2;
    obj2.a = obj1;
    // 两个对象被引用次数都是2，在函数重复执行时会产生大量内存占用
}

// IE中一部分对象不是js原生的，而是基于C++的COM(Component Object Model)，使用计数引用。

// 尽管js使用标记清除，也无法清除

// 写法上对不用的引用可赋值 null

// IE9+ 把所有的DOM BOM转为js对象，使用标记清除法